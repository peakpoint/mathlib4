/-
Copyright (c) 2023 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import Mathlib.MeasureTheory.Function.AEEqFun.DomAct
import Mathlib.MeasureTheory.Function.LpSpace.Indicator

/-!
# Action of `M·µà·µÉ` on `L·µñ` spaces

In this file we define action of `M·µà·µÉ` on `MeasureTheory.Lp E p Œº`
If `f : Œ± ‚Üí E` is a function representing an equivalence class in `L·µñ(Œ±, E)`, `M` acts on `Œ±`,
and `c : M`, then `(.mk c : M·µà·µÉ) ‚Ä¢ [f]` is represented by the function `a ‚Ü¶ f (c ‚Ä¢ a)`.

We also prove basic properties of this action.
-/

open MeasureTheory Filter
open scoped ENNReal

namespace DomAct

variable {M N Œ± E : Type*} [MeasurableSpace M] [MeasurableSpace N]
  [MeasurableSpace Œ±] [NormedAddCommGroup E] {Œº : MeasureTheory.Measure Œ±} {p : ‚Ñù‚â•0‚àû}

section SMul

variable [SMul M Œ±] [SMulInvariantMeasure M Œ± Œº] [MeasurableSMul M Œ±]

@[to_additive]
instance : SMul M·µà·µÉ (Lp E p Œº) where
  smul c f := Lp.compMeasurePreserving (mk.symm c ‚Ä¢ ¬∑) (measurePreserving_smul _ _) f

@[to_additive (attr := simp)]
theorem smul_Lp_val (c : M·µà·µÉ) (f : Lp E p Œº) : (c ‚Ä¢ f).1 = c ‚Ä¢ f.1 := rfl

@[to_additive]
theorem smul_Lp_ae_eq (c : M·µà·µÉ) (f : Lp E p Œº) : c ‚Ä¢ f =·µê[Œº] (f <| mk.symm c ‚Ä¢ ¬∑) :=
  Lp.coeFn_compMeasurePreserving _ _

@[to_additive]
theorem mk_smul_toLp (c : M) {f : Œ± ‚Üí E} (hf : MemLp f p Œº) :
    mk c ‚Ä¢ hf.toLp f =
      (hf.comp_measurePreserving <| measurePreserving_smul c Œº).toLp (f <| c ‚Ä¢ ¬∑) :=
  rfl

@[to_additive (attr := simp)]
theorem smul_Lp_const [IsFiniteMeasure Œº] (c : M·µà·µÉ) (a : E) :
    c ‚Ä¢ Lp.const p Œº a = Lp.const p Œº a :=
  rfl

@[to_additive]
theorem mk_smul_indicatorConstLp (c : M)
    {s : Set Œ±} (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (b : E) :
    mk c ‚Ä¢ indicatorConstLp p hs hŒºs b =
      indicatorConstLp p (hs.preimage <| measurable_const_smul c)
        (by rwa [SMulInvariantMeasure.measure_preimage_smul c hs]) b :=
  rfl

instance [SMul N Œ±] [SMulCommClass M N Œ±] [SMulInvariantMeasure N Œ± Œº] [MeasurableSMul N Œ±] :
    SMulCommClass M·µà·µÉ N·µà·µÉ (Lp E p Œº) :=
  Subtype.val_injective.smulCommClass (fun _ _ ‚Ü¶ rfl) fun _ _ ‚Ü¶ rfl

instance {ùïú : Type*} [NormedRing ùïú] [Module ùïú E] [IsBoundedSMul ùïú E] :
    SMulCommClass M·µà·µÉ ùïú (Lp E p Œº) :=
  Subtype.val_injective.smulCommClass (fun _ _ ‚Ü¶ rfl) fun _ _ ‚Ü¶ rfl

instance {ùïú : Type*} [NormedRing ùïú] [Module ùïú E] [IsBoundedSMul ùïú E] :
    SMulCommClass ùïú M·µà·µÉ (Lp E p Œº) :=
  .symm _ _ _

-- We don't have a typeclass for additive versions of the next few lemmas
-- Should we add `AddDistribAddAction` with `to_additive` both from `MulDistribMulAction`
-- and `DistribMulAction`?

@[to_additive]
theorem smul_Lp_add (c : M·µà·µÉ) : ‚àÄ f g : Lp E p Œº, c ‚Ä¢ (f + g) = c ‚Ä¢ f + c ‚Ä¢ g := by
  rintro ‚ü®‚ü®‚ü©, _‚ü© ‚ü®‚ü®‚ü©, _‚ü©; rfl
attribute [simp] DomAct.vadd_Lp_add

@[to_additive (attr := simp 1001)]
theorem smul_Lp_zero (c : M·µà·µÉ) : c ‚Ä¢ (0 : Lp E p Œº) = 0 := rfl

@[to_additive]
theorem smul_Lp_neg (c : M·µà·µÉ) (f : Lp E p Œº) : c ‚Ä¢ (-f) = -(c ‚Ä¢ f) := by
  rcases f with ‚ü®‚ü®_‚ü©, _‚ü©; rfl

@[to_additive]
theorem smul_Lp_sub (c : M·µà·µÉ) : ‚àÄ f g : Lp E p Œº, c ‚Ä¢ (f - g) = c ‚Ä¢ f - c ‚Ä¢ g := by
  rintro ‚ü®‚ü®‚ü©, _‚ü© ‚ü®‚ü®‚ü©, _‚ü©; rfl

instance : DistribSMul M·µà·µÉ (Lp E p Œº) where
  smul_zero _ := rfl
  smul_add := by rintro _ ‚ü®‚ü®‚ü©, _‚ü© ‚ü®‚ü®‚ü©, _‚ü©; rfl

-- The next few lemmas follow from the `IsIsometricSMul` instance if `1 ‚â§ p`
@[to_additive (attr := simp)]
theorem norm_smul_Lp (c : M·µà·µÉ) (f : Lp E p Œº) : ‚Äñc ‚Ä¢ f‚Äñ = ‚Äñf‚Äñ :=
  Lp.norm_compMeasurePreserving _ _

@[to_additive (attr := simp)]
theorem nnnorm_smul_Lp (c : M·µà·µÉ) (f : Lp E p Œº) : ‚Äñc ‚Ä¢ f‚Äñ‚Çä = ‚Äñf‚Äñ‚Çä :=
  NNReal.eq <| Lp.norm_compMeasurePreserving _ _

@[to_additive (attr := simp)]
theorem dist_smul_Lp (c : M·µà·µÉ) (f g : Lp E p Œº) : dist (c ‚Ä¢ f) (c ‚Ä¢ g) = dist f g := by
  simp only [dist, ‚Üê smul_Lp_sub, norm_smul_Lp]

@[to_additive (attr := simp)]
theorem edist_smul_Lp (c : M·µà·µÉ) (f g : Lp E p Œº) : edist (c ‚Ä¢ f) (c ‚Ä¢ g) = edist f g := by
  simp only [Lp.edist_dist, dist_smul_Lp]

variable [Fact (1 ‚â§ p)]

@[to_additive]
instance : IsIsometricSMul M·µà·µÉ (Lp E p Œº) := ‚ü®edist_smul_Lp‚ü©

end SMul

section MulAction

variable [Monoid M] [MulAction M Œ±] [SMulInvariantMeasure M Œ± Œº] [MeasurableSMul M Œ±]

@[to_additive]
instance : MulAction M·µà·µÉ (Lp E p Œº) := Subtype.val_injective.mulAction _ fun _ _ ‚Ü¶ rfl

instance : DistribMulAction M·µà·µÉ (Lp E p Œº) :=
  Subtype.val_injective.distribMulAction ‚ü®‚ü®_, rfl‚ü©, fun _ _ ‚Ü¶ rfl‚ü© fun _ _ ‚Ü¶ rfl

end MulAction

end DomAct
